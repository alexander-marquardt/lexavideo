

/* Small devices (tablets, 768px and up) */
$sm-vid-width: 335px;

/* Medium devices (desktops, 992px and up) */
$md-vid-width: 445px;

/* Large devices (large desktops, 1200px and up) */
$lg-vid-width : 555px;

$xs-viewport-sizes-list: 320px, 360px, 400px, 480px, 600px;

// As the viewport size changes, we change the size of the video windows. Also, once the size
// gets through sm or larger, we place two windows side-by-side instead of one embedded inside the other.
$viewport-sizes-list: join($xs-viewport-sizes-list, ($screen-sm-min, $screen-md-min, $screen-lg-min));

// Take into account if there is only a single video window, or if there are two windows side-by-side
$video-sizes-with-borders-list: join($xs-viewport-sizes-list, ($sm-vid-width, $md-vid-width, $lg-vid-width));
$video-sizes-list: ();
@each $size in $video-sizes-with-borders-list {
  $video-sizes-list: append($video-sizes-list, $size - 2px);
}


$mini-video-width-percentage : 30%;

$video-aspect-ratio : 3/4;
$characters-per-row : 80;

.cl-local-video-wrapper-div {
  //position: absolute;
  //transform: scale(-1, 1);
  //-webkit-transform: scale(-1, 1);
  //-webkit-backface-visibility: hidden;
}

@mixin generate-video-sizing() {
  @for $idx from 2 through length($viewport-sizes-list) {
    @media (min-width: nth($viewport-sizes-list, $idx)) {
      width: nth($video-sizes-list, $idx);
      height: nth($video-sizes-list, $idx) * $video-aspect-ratio;
    }
  }
}

.cl-video-sizing {
  width: nth($video-sizes-list, 1);
  height: nth($video-sizes-list, 1) * $video-aspect-ratio;

  @include generate-video-sizing();
}

video {
  opacity: 1;
  -webkit-transition-property: opacity;
  -webkit-transition-duration: 1s;
  display: block; // remove 5 px gap at bottom
}


#id-mini-video-div {
  position: absolute;
  height: $mini-video-width-percentage;
  width: $mini-video-width-percentage;
  top: 0px;
  left: 0px;
  opacity: 1.0;

  // only show on devices with xs screens
  @extend .cl-hide-on-larger-than-xs;
}

.cl-mini-video-element {
  width: 100%;
  height: 100%;
  opacity: 0;
  -webkit-transition-property: opacity;
  -webkit-transition-duration: 1s;
}

.cl-ascii-container {
  padding: 0;
  display: table-cell;
  vertical-align: middle;
  text-align: center;
  border: none;
  border-radius: 0px;
}


@mixin generate-ascii-container-sizing() {
  @for $idx from 2 through length($xs-viewport-sizes-list) {
    @media (min-width: nth($viewport-sizes-list, $idx)) {
      width: ($mini-video-width-percentage / 100%) * nth($video-sizes-list, $idx);
      height: ($mini-video-width-percentage / 100%) * nth($video-sizes-list, $idx) * $video-aspect-ratio;
    }
  }
}


.cl-mini-ascii-container-sizing {

  width: ($mini-video-width-percentage / 100%) * nth($video-sizes-list, 1);
  height: ($mini-video-width-percentage / 100%) * nth($video-sizes-list, 1) * $video-aspect-ratio;

  @include generate-ascii-container-sizing();
}


.cl-ascii-drawing-text {
  font-family: 'Courier New', 'Courier', monospace;
  display: inline-block;
}


@mixin generate-ascii-normal-span() {
  @for $idx from 2 through length($viewport-sizes-list) {
    @media (min-width: nth($viewport-sizes-list, $idx)) {
      font-size: nth($video-sizes-list, $idx) / $characters-per-row;
      line-height: nth($video-sizes-list, $idx) / $characters-per-row;
    }
  }
}

.cl-ascii-normal-span {

  font-size: nth($video-sizes-list, 1) / $characters-per-row;
  line-height: nth($video-sizes-list, 1) / $characters-per-row;
  letter-spacing: -0.1em;

  @include generate-ascii-normal-span();
}

@mixin generate-ascii-mini-span() {
  @for $idx from 2 through length($xs-viewport-sizes-list) {
    @media (min-width: nth($xs-viewport-sizes-list, $idx)) {
      font-size: ($mini-video-width-percentage / 100%) * nth($video-sizes-list, $idx) / $characters-per-row;
      line-height: ($mini-video-width-percentage / 100%) * nth($video-sizes-list, $idx) / $characters-per-row;
    }
  }
}

.cl-ascii-mini-span {
  // This is applied when the ascii text is being shown in the "mini-video" window
  font-size: ($mini-video-width-percentage / 100%) * (nth($video-sizes-list, 1) / $characters-per-row);
  line-height:($mini-video-width-percentage / 100%) * (nth($video-sizes-list, 1) / $characters-per-row);
  letter-spacing: -0.1em;

  @include generate-ascii-mini-span();
}