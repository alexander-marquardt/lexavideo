{
  "name": "angular-jwt",
  "version": "0.0.7",
  "description": "Library to help you work with JWTs on AngularJS",
  "main": "dist/angular-jwt.js",
  "author": {
    "name": "Martin Gontovnikas",
    "email": "martin@gon.to"
  },
  "dependencies": {},
  "devDependencies": {
    "karma-mocha-reporter": "^0.3.1",
    "chai": "^1.9.1",
    "chai-jquery": "^1.2.3",
    "gulp": "^3.8.7",
    "gulp-concat": "^2.3.4",
    "gulp-ng-annotate": "^0.3.3",
    "gulp-rename": "^1.2.0",
    "gulp-uglify": "^0.3.1",
    "karma": "^0.12.22",
    "karma-chai": "^0.1.0",
    "karma-chai-jquery": "^1.0.0",
    "karma-chrome-launcher": "^0.1.4",
    "karma-jasmine": "^0.1.5",
    "karma-jquery": "^0.1.0",
    "karma-mocha": "^0.1.8",
    "karma-phantomjs-launcher": "^0.1.4",
    "karma-sinon-chai": "^0.2.0",
    "mocha": "^1.21.4",
    "sinon": "^1.10.3",
    "sinon-chai": "^2.5.0"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "readme": "# angular-jwt\n\nThis library will help you work with [JWTs](http://jwt.io/).\n\n## Key Features\n\n* **Decode a JWT** from your AngularJS app\n* Check the **expiration date** of the JWT\n* Automatically **send the JWT in every request** made to the server\n* Use **refresh tokens to always send a not expired JWT** to the server\n\n## Installing it\n\nYou have several options:\n\n````bash\nbower install angular-jwt\n````\n\n````bash\nnpm install angular-jwt\n````\n\n````html\n<script type=\"text/javascript\" src=\"https://cdn.rawgit.com/auth0/angular-jwt/master/dist/angular-jwt.js\"></script>\n````\n\n## jwtHelper\n\njwtHelper will take care of helping you decode the token and check its expiration date.\n\n### Decoding the token\n\n````js\nangular.module('app', ['angular-jwt'])\n.controller('Controller', function Controller(jwtHelper) {\n  var expToken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3NhbXBsZXMuYXV0aDAuY29tLyIsInN1YiI6ImZhY2Vib29rfDEwMTU0Mjg3MDI3NTEwMzAyIiwiYXVkIjoiQlVJSlNXOXg2MHNJSEJ3OEtkOUVtQ2JqOGVESUZ4REMiLCJleHAiOjE0MTIyMzQ3MzAsImlhdCI6MTQxMjE5ODczMH0.7M5sAV50fF1-_h9qVbdSgqAnXVF7mz3I6RjS6JiH0H8';  \n\n  var tokenPayload = jwtHelper.decodeToken(expToken);\n})\n````\n### Getting the token expiration date\n\n````js\nangular.module('app', ['angular-jwt'])\n.controller('Controller', function Controller(jwtHelper) {\n  var date = jwtHelper.getTokenExpirationDate(expToken);\n})\n````\n\n### Checking if token is expired\n\n````js\nangular.module('app', ['angular-jwt'])\n.controller('Controller', function Controller(jwtHelper) {\n  var bool = jwtHelper.isTokenExpired(expToken);\n})\n````\n\n### More examples\n\nYou can see some more examples of how this works in [the tests](https://github.com/auth0/angular-jwt/blob/master/test/unit/angularJwt/services/jwtSpec.js)\n\n## jwtInterceptor\n\nJWT interceptor will take care of sending the JWT in every request.\n\n### Basic usage\n\n````js\nangular.module('app', ['angular-jwt'])\n.config(function Config($httpProvider, jwtInterceptorProvider) {\n  // Please note we're annotating the function so that the $injector works when the file is minified\n  jwtInterceptorProvider.tokenGetter = ['myService', function(myService) {\n    myService.doSomething();\n    return localStorage.getItem('id_token');\n  }];\n  \n  $httpProvider.interceptors.push('jwtInterceptor');\n})\n.controller('Controller', function Controller($http) {\n  // If localStorage contains the id_token it will be sent in the request\n  // Authorization: Bearer [yourToken] will be sent\n  $http({\n    url: '/hola',\n    method: 'GET'\n  });\n})\n````\n\n### Not sending the JWT for specific requests\n\n````js\nangular.module('app', ['angular-jwt'])\n.config(function Config($httpProvider, jwtInterceptorProvider) {\n  // Please note we're annotating the function so that the $injector works when the file is minified\n  jwtInterceptorProvider.tokenGetter = ['myService', function(myService) {\n    myService.doSomething();\n    return localStorage.getItem('id_token');\n  }];\n  \n  $httpProvider.interceptors.push('jwtInterceptor');\n})\n.controller('Controller', function Controller($http) {\n  // This request will NOT send the token as it has skipAuthentication\n  $http({\n    url: '/hola',\n    skipAuthorization: true\n    method: 'GET'\n  });\n})\n````\n\n### Not sending the JWT for template requests\n\nBy default the interceptor will send the JWT for all HTTP requests. This includes any `ng-include` directives or \n`templateUrls` defined in a `state` in the `stateProvider`. If you want to avoid sending the JWT for these requests you\nshould adapt your `tokenGetter` method to fit your needs. For example:\n\n````js\nangular.module('app', ['angular-jwt'])\n.config(function Config($httpProvider, jwtInterceptorProvider) {\n  jwtInterceptorProvider.tokenGetter = ['config', function(config) {\n    // Skip authentication for any requests ending in .html\n    if (config.url.substr(config.url.length - 5) == '.html') {\n      return null;\n    }\n    \n    return localStorage.getItem('id_token');\n  }];\n  \n  $httpProvider.interceptors.push('jwtInterceptor');\n})\n````\n\n### Sending different tokens based on URLs\n\n````js\nangular.module('app', ['angular-jwt'])\n.config(function Config($httpProvider, jwtInterceptorProvider) {\n  jwtInterceptorProvider.tokenGetter = function(config) {\n    if (config.url.indexOf('http://auth0.com') === 0) {\n      return localStorage.getItem('auth0.id_token');\n    } else {\n      return localStorage.getItem('id_token');\n    }\n  }\n  $httpProvider.interceptors.push('jwtInterceptor');\n})\n.controller('Controller', function Controller($http) {\n  // This request will send the auth0.id_token since URL matches\n  $http({\n    url: 'http://auth0.com/hola',\n    skipAuthorization: true\n    method: 'GET'\n  });\n}\n````\n\n### Using promises on the `tokenGetter`: Refresh Token example\n\nAs sometimes we need to get first the `id_token` in order to send it, we can return a promise in the `tokenGetter`. Let's see for example how we'd use a `refresh_token`\n\n````js\nangular.module('app', ['angular-jwt'])\n.config(function Config($httpProvider, jwtInterceptorProvider) {\n  jwtInterceptorProvider.tokenGetter = function(jwtHelper, $http) {\n    var idToken = localStorage.getItem('id_token');\n    var refreshToken = localStorage.getItem('refresh_token');\n    if (jwtHelper.isTokenExpired(idToken)) {\n      // This is a promise of a JWT id_token\n      return $http({\n        url: '/delegation',\n        // This makes it so that this request doesn't send the JWT\n        skipAuthorization: true,\n        method: 'POST',\n        data: { \n            grant_type: 'refresh_token',\n            refresh_token: refreshToken \n        }\n      }).then(function(response) {\n        var id_token = response.data.id_token;\n        localStorage.setItem('id_token', id_token);\n        return id_token;\n      });\n    } else {\n      return idToken;\n    }\n  }\n  $httpProvider.interceptors.push('jwtInterceptor');\n})\n.controller('Controller', function Controller($http) {\n  // Authorization: Bearer [yourToken] will be sent. \n  // That token might be a new one which was got from the refresh token\n  $http({\n    url: '/hola',\n    method: 'GET'\n  });\n})\n````\n\n### More examples\n\nYou can see some more examples of how this works in [the tests](https://github.com/auth0/angular-jwt/blob/master/test/unit/angularJwt/services/interceptorSpec.js)\n\n## FAQ\n\n### I have minification problems with angular-jwt in production. What's going on?\n\nWhen you're using the `tokenGetter` function, it's then called with the injector. `ngAnnotate` doesn't automatically detect that this function receives services as parameters, therefore you must either annotate this method for `ngAnnotate` to know, or use it like follows: \n\n````js\njwtInterceptorProvider.tokenGetter = ['store', '$http', function(store, $http) {\n  ...\n}];\n````\n\n## Usages\n\nThis library is used in [auth0-angular](https://github.com/auth0/auth0-angular)\n\n## Contributing\n\nJust clone the repo, run `npm install`, `bower install` and then `gulp` to work :).\n\n## Issue Reporting\n\nIf you have found a bug or if you have a feature request, please report them at this repository issues section. Please do not report security vulnerabilities on the public GitHub issue tracker. The [Responsible Disclosure Program](https://auth0.com/whitehat) details the procedure for disclosing security issues.\n\n## What is Auth0?\n\nAuth0 helps you to:\n\n* Add authentication with [multiple authentication sources](https://docs.auth0.com/identityproviders), either social like **Google, Facebook, Microsoft Account, LinkedIn, GitHub, Twitter, Box, Salesforce, amont others**, or enterprise identity systems like **Windows Azure AD, Google Apps, Active Directory, ADFS or any SAML Identity Provider**.\n* Add authentication through more traditional **[username/password databases](https://docs.auth0.com/mysql-connection-tutorial)**.\n* Add support for **[linking different user accounts](https://docs.auth0.com/link-accounts)** with the same user.\n* Support for generating signed [Json Web Tokens](https://docs.auth0.com/jwt) to call your APIs and **flow the user identity** securely.\n* Analytics of how, when and where users are logging in.\n* Pull data from other sources and add it to the user profile, through [JavaScript rules](https://docs.auth0.com/rules).\n\n## Create a free account in Auth0\n\n1. Go to [Auth0](https://auth0.com) and click Sign Up.\n2. Use Google, GitHub or Microsoft Account to login.\n\n## Author\n\n[Auth0](https://auth0.com)\n\n## License\n\nThis project is licensed under the MIT license. See the [LICENSE](LICENSE) file for more info.\n\n\n\n",
  "readmeFilename": "README.md",
  "_id": "angular-jwt@0.0.7",
  "dist": {
    "shasum": "2ff8fcbb9bc6c34676f6b1ab83240e94e1aaed76"
  },
  "_from": "angular-jwt@",
  "_resolved": "https://registry.npmjs.org/angular-jwt/-/angular-jwt-0.0.7.tgz"
}
